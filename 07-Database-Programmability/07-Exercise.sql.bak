CREATE OR REPLACE FUNCTION fn_full_name(first_name VARCHAR, last_name VARCHAR)
RETURNS VARCHAR
AS
$$
	DECLARE
		full_name VARCHAR;
	BEGIN
		IF 
			first_name IS NULL AND last_name IS null THEN
				RETURN null;
		ELSEIF 
			first_name IS NULL THEN
				RETURN last_name;
		ELSEIF 
			last_name IS NULL THEN
				RETURN first_name;
		ELSE
			full_name := CONCAT(INITCAP(first_name), ' ', INITCAP(last_name));
			RETURN full_name;
		END IF;
	END;
$$
LANGUAGE plpgsql
;
SELECT fn_full_name('fred', 'sanford');
SELECT fn_full_name('', 'SIMPSONS');
SELECT fn_full_name('JOHN', '');
SELECT fn_full_name(NULL, NULL);


-- 02.User-defined Function Future Value

DROP FUNCTION fn_calculate_future_value;

CREATE OR REPLACE FUNCTION fn_calculate_future_value(
	initial_sum DECIMAL
	, yearly_interest_rate DECIMAL
	, number_of_years INT)
RETURNS DECIMAL
AS
$$
	DECLARE
		future_value DECIMAL;
	BEGIN
		future_value := initial_sum * (POWER((1 + yearly_interest_rate), number_of_years));
		RETURN TRUNC(future_value, 4);
	END;
$$
LANGUAGE plpgsql
;
SELECT fn_calculate_future_value (1000, 0.1, 5);
SELECT fn_calculate_future_value (2500, 0.30, 2);
SELECT fn_calculate_future_value (500, 0.25, 10);
SELECT fn_calculate_future_value (1400, 0.15, 5);


-- 03.User-defined Function Is Word Comprised

-- DROP FUNCTION fn_is_word_comprised;

CREATE OR REPLACE FUNCTION fn_is_word_comprised(
	set_of_letters VARCHAR(50)
	,word VARCHAR(50)
	)
RETURNS BOOLEAN
AS
$$		
	BEGIN
		RETURN TRIM(LOWER(word), LOWER(set_of_letters)) = '';
	END;
$$
LANGUAGE plpgsql
;


-- With For loop
CREATE OR REPLACE FUNCTION fn_is_word_comprised(
	set_of_letters VARCHAR(50)
	,word VARCHAR(50)
	)
RETURNS BOOLEAN
AS
$$	
	DECLARE
		i INT;
		letter VARCHAR;
	BEGIN
		FOR i IN 1..length(word) LOOP
			letter := substring(lower(word), i, 1);
			IF position(letter IN lower(set_of_letters)) = 0 THEN
				RETURN FALSE;
			END IF;
		END LOOP;
		
		RETURN TRUE;
	END;
$$
LANGUAGE plpgsql
;

SELECT fn_is_word_comprised('ois tmiah%f', 'halves');
SELECT fn_is_word_comprised('ois tmiah%f', 'Sofia');
SELECT fn_is_word_comprised('bobr', 'Rob');
SELECT fn_is_word_comprised('papopep', 'toe');
SELECT fn_is_word_comprised('R@o!B$B', 'Bob');

-- 04.Game Over

CREATE OR REPLACE FUNCTION fn_is_game_over(is_game_over BOOLEAN)
RETURNS TABLE(
	"name" VARCHAR(50)
	,game_type_id INT
	,is_finished BOOLEAN
	)
AS
$$
	BEGIN
		RETURN QUERY
		SELECT 
			g.name
			,g.game_type_id
			,g.is_finished
		FROM games as g
		WHERE g.is_finished = is_game_over;
	END;
$$
LANGUAGE plpgsql
;


-- 05. Difficulty Level

